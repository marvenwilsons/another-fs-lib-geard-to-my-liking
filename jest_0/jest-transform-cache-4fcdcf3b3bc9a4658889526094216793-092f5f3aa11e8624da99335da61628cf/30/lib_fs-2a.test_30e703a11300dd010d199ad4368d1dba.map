{"version":3,"sources":["lib_fs-2a.test.js"],"names":["d","require","test","expect","cd","toBe","e","message","ls","endWith","endsWith","undefined","console","log"],"mappings":"AAAA,MAAMA,IAAIC,QAAQ,YAAR,CAAV;;AAEA;AACIC,KAAK,oBAAL,EAA2B,MAAM;AAC7B;AACAC,WAAQH,EAAEI,EAAF,CAAK,SAAL,CAAR,EAA0BC,IAA1B,CAA+B,IAA/B;AACA;AACA,QAAG;AACCL,UAAEI,EAAF,CAAK,KAAL;AACH,KAFD,CAEC,OAAME,CAAN,EAAQ;AACLH,eAAQG,EAAEC,OAAV,EAAoBF,IAApB,CAA0B,4BAA1B;AACH;AACJ,CATD;AAUAH,KAAK,2CAAL,EAAkD,MAAM;AACpD,QAAG;AACCF,UAAEI,EAAF,CAAK,CAAL;AACH,KAFD,CAEC,OAAOE,CAAP,EAAS;AACNH,eAAOG,EAAEC,OAAT,EAAkBF,IAAlB,CAAuB,+EAAvB;AACH;AACJ,CAND;AAOAH,KAAK,gEAAL,EAAuE,MAAM;AACzE,QAAG;AACCF,UAAEI,EAAF,CAAK,EAAL;AACH,KAFD,CAEC,OAAME,CAAN,EAAQ;AACLH,eAAOG,EAAEC,OAAT,EAAkBF,IAAlB,CAAuB,wDAAvB;AACH;AACJ,CAND;AAOJ;AACIH,KAAK,iDAAL,EAAuD,MAAM;AACzD,QAAG;AACCF,UAAEQ,EAAF,CAAK,EAAL;AACH,KAFD,CAEC,OAAMF,CAAN,EAAQ;AACLH,eAAOG,EAAEC,OAAT,EAAkBF,IAAlB,CAAuB,2CAAvB;AACH;AACJ,CAND;AAOAH,KAAK,+CAAL,EAAqD,MAAM;AACvD,QAAG;AACCF,UAAEQ,EAAF,CAAK,EAACC,SAAS,EAAV,EAAL;AACH,KAFD,CAEC,OAAMH,CAAN,EAAQ;AACLH,eAAOG,EAAEC,OAAT,EAAkBF,IAAlB,CAAuB,oFAAvB;AACH;AACJ,CAND;AAOAH,KAAK,2EAAL,EAAiF,MAAM;AACnF,QAAG;AACCF,UAAEQ,EAAF,CAAK,EAACE,UAAU,EAAX,EAAL;AACH,KAFD,CAEC,OAAMJ,CAAN,EAAQ;AACLH,eAAOG,EAAEC,OAAT,EAAkBF,IAAlB,CAAuB,oDAAvB;AACH;AACJ,CAND;AAOAH,KAAK,sDAAL,EAA4D,MAAM;AAC9D,QAAG;AACCF,UAAEQ,EAAF,CAAK,EAACE,UAAUC,SAAX,EAAL;AACH,KAFD,CAEC,OAAML,CAAN,EAAQ;AACLH,eAAOG,EAAEC,OAAT,EAAkBF,IAAlB,CAAuB,kDAAvB;AACH;AACJ,CAND;AAOAH,KAAK,uCAAL,EAA6C,MAAM;AAC/C,QAAG;AACCF,UAAEQ,EAAF,CAAK,EAACE,UAAU,KAAX,EAAL;AACH,KAFD,CAEC,OAAMJ,CAAN,EAAQ;AACLM,gBAAQC,GAAR,CAAYP,CAAZ;AACH;AACJ,CAND;;AAUJ;AACI;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA","file":"lib_fs-2a.test.js","sourcesContent":["const d = require('./lib_dqfs')\n\n//change directory cd()\n    test('set root directory', () => {\n        // checks1\n        expect( d.cd('lib/foo') ).toBe(true)\n        // Checks2        \n        try{\n            d.cd('foi')\n        }catch(e){\n            expect( e.message ).toBe( \"cd: no such directory foi/\" )\n        }\n    })\n    test('check parameter if correct type of string', () => {\n        try{\n            d.cd(2)\n        }catch (e){\n            expect(e.message).toBe(\"on cd() function argument position (1) cannot be undefined should be a string\")\n        }\n    })\n    test('should throw empty path error when param is undefined or empty', () => {\n        try{\n            d.cd('')\n        }catch(e){\n            expect(e.message).toBe('cd function cannot take an empty string as an argument')\n        }\n    })\n// list ls()\n    test('should throw an error: args empty object passed',() => {\n        try{\n            d.ls({})\n        }catch(e){\n            expect(e.message).toBe('listError: Options object cannot be empty')\n        }\n    })\n    test('should throw an error 1: incorrect key passed',() => {\n        try{\n            d.ls({endWith: ''})\n        }catch(e){\n            expect(e.message).toBe('listError: \"endWith\" is not recognized, options are \"endsWith,startsWith,wildCard\"')\n        }\n    })\n    test('should throw an error 2: empty string passed as a value to options object',() => {\n        try{\n            d.ls({endsWith: ''})\n        }catch(e){\n            expect(e.message).toBe('listError: Options value cannot be an empty string')\n        }\n    })\n    test('should throw an error 3: not a type of string passed',() => {\n        try{\n            d.ls({endsWith: undefined})\n        }catch(e){\n            expect(e.message).toBe('listError: Options value type should be a string')\n        }\n    })\n    test('happy path case1: arg is 1 and object',() => {\n        try{\n            d.ls({endsWith: 'foo'})\n        }catch(e){\n            console.log(e)\n        }\n    })\n\n\n\n// directory methods\n    // create\n    // d.mkdir() --> creates folder\n    // d.mkdtemp() --> make a temporart directory\n\n    // removing\n    // d.rmdir() --> deletes folder and its contents\n    // d.rm(path,'')\n    // d.emptyDir()\n\n    // listing\n    // d.ls() --> list all items in a folder\n    // d.ls(path,{endsWith:'.js'}) --> list all files that ends with the string specified in folder, returns how many match found\n    // d.ls(undefiend,{startsWith: '_'})\n    // d.ls(undefiend,'.js') --> list all files that has a .js wherever in the name \n    // d.lsDir() --> list all directories inside that folder\n\n    // rename\n    // d.rename(path,path)\n\n    // find\n    // d.find()\n\n    //copy\n    // d.copy(from,to)\n    // d.flushContent(fromFile,toFile)\n\n"]}