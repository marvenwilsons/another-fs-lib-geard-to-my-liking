83279b8da7130268a603a7af4d681f85
const dqfs = require('./lib_dqfs');
class sy {
    constructor() {
        this.finalVal = undefined;
    }
    cd(path) {
        dqfs.cd(path);
        return this;
    }
    ls(absolutePath, options) {
        this.finalVal = dqfs.ls(absolutePath, options);
        return this;
    }
    touch(file) {
        dqfs.touch(file);
        return this;
    }
    mkdir() {}
    rmdir() {}
    rm() {}
    cp() {}
    mv() {}
    // done
    sortByName(modes) {
        const arr = this.finalVal.reverse();
        this.finalVal = arr;
        return this;
    }
    sortBySize(modes) {
        const modeIsUndef = modes == undefined;
        const modeAccpt = typeof modes == 'string';
        const sadThrow = m => {
            throw `${m}`;
        };
        const opts = ['asc', 'dec'];
        const acs = () => {
            this.finalVal = this.finalVal.sort((a, b) => a.size - b.size);
        };
        const dec = () => {
            this.finalVal = this.finalVal.sort((a, b) => b.size - a.size);
        };

        typeof modes != 'string' && modes != undefined && sadThrow(`Eroor In SortBySize: arg should only be a type of string`);

        if (modeAccpt && !modeIsUndef) {
            if (opts.indexOf(modes) != -1) {
                opts.indexOf(modes) == 0 && acs();
                opts.indexOf(modes) == 1 && dec();
            } else {
                sadThrow(`Error In SortBySize: arg ${modes} is not recognize, only asc and dec`);
            }
        }

        return this;
    }
    // done
    sortByNumberDirItems(modes) {
        const modeIsUndef = modes == undefined;
        const modeAccpt = typeof modes == 'string';
        const sadThrow = m => {
            throw `${m}`;
        };
        const opts = ['asc', 'dec'];
        const acs = () => {
            this.finalVal = this.finalVal.sort((a, b) => a.size - b.items);
        };
        const dec = () => {
            this.finalVal = this.finalVal.sort((a, b) => b.size - a.items);
        };

        typeof modes != 'string' && modes != undefined && sadThrow(`Eroor In SortBySize: arg should only be a type of string`);

        if (modeAccpt && !modeIsUndef) {
            if (opts.indexOf(modes) != -1) {
                opts.indexOf(modes) == 0 && acs();
                opts.indexOf(modes) == 1 && dec();
            } else {
                sadThrow(`Error In SortBySize: arg ${modes} is not recognize, only asc and dec`);
            }
        }

        return this;
    }
    // done
    sortByDateCreated() {}
    sortByDateModified() {}
    groupByType() {
        currentTypes = [];
    }
    groupByMonth() {}
    groupByYear() {}
    getChildDirs(path) {}
    done() {
        return this.finalVal;
    }
}

module.exports = sy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYl9kcWZzLmV4dHMuanMiXSwibmFtZXMiOlsiZHFmcyIsInJlcXVpcmUiLCJzeSIsImNvbnN0cnVjdG9yIiwiZmluYWxWYWwiLCJ1bmRlZmluZWQiLCJjZCIsInBhdGgiLCJscyIsImFic29sdXRlUGF0aCIsIm9wdGlvbnMiLCJ0b3VjaCIsImZpbGUiLCJta2RpciIsInJtZGlyIiwicm0iLCJjcCIsIm12Iiwic29ydEJ5TmFtZSIsIm1vZGVzIiwiYXJyIiwicmV2ZXJzZSIsInNvcnRCeVNpemUiLCJtb2RlSXNVbmRlZiIsIm1vZGVBY2NwdCIsInNhZFRocm93IiwibSIsIm9wdHMiLCJhY3MiLCJzb3J0IiwiYSIsImIiLCJzaXplIiwiZGVjIiwiaW5kZXhPZiIsInNvcnRCeU51bWJlckRpckl0ZW1zIiwiaXRlbXMiLCJzb3J0QnlEYXRlQ3JlYXRlZCIsInNvcnRCeURhdGVNb2RpZmllZCIsImdyb3VwQnlUeXBlIiwiY3VycmVudFR5cGVzIiwiZ3JvdXBCeU1vbnRoIiwiZ3JvdXBCeVllYXIiLCJnZXRDaGlsZERpcnMiLCJkb25lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBT0MsUUFBUSxZQUFSLENBQWI7QUFDQSxNQUFNQyxFQUFOLENBQVM7QUFDTEMsa0JBQWM7QUFDVixhQUFLQyxRQUFMLEdBQWdCQyxTQUFoQjtBQUNIO0FBQ0RDLE9BQUdDLElBQUgsRUFBUTtBQUNKUCxhQUFLTSxFQUFMLENBQVFDLElBQVI7QUFDQSxlQUFPLElBQVA7QUFDSDtBQUNEQyxPQUFHQyxZQUFILEVBQWdCQyxPQUFoQixFQUF3QjtBQUNwQixhQUFLTixRQUFMLEdBQWdCSixLQUFLUSxFQUFMLENBQVFDLFlBQVIsRUFBcUJDLE9BQXJCLENBQWhCO0FBQ0EsZUFBTyxJQUFQO0FBQ0g7QUFDREMsVUFBTUMsSUFBTixFQUFXO0FBQ1BaLGFBQUtXLEtBQUwsQ0FBV0MsSUFBWDtBQUNBLGVBQU8sSUFBUDtBQUNIO0FBQ0RDLFlBQU8sQ0FF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QUE0QmMsS0FBNUI7QUFDSCxhQUhELE1BR0s7QUFDRFIseUJBQVUsNEJBQTJCTixLQUFNLHFDQUEzQztBQUNIO0FBQ0o7O0FBRUQsZUFBTyxJQUFQO0FBQ0g7QUFDRDtBQUNBa0Isd0JBQW1CLENBRWxCO0FBQ0RDLHlCQUFvQixDQUVuQjtBQUNEQyxrQkFBYTtBQUNUQyx1QkFBZSxFQUFmO0FBQ0g7QUFDREMsbUJBQWMsQ0FFYjtBQUNEQyxrQkFBYSxDQUVaO0FBQ0RDLGlCQUFhcEMsSUFBYixFQUFrQixDQUVqQjtBQUNEcUMsV0FBTTtBQUNGLGVBQU8sS0FBS3hDLFFBQVo7QUFDSDtBQXZHSTs7QUEyR1R5QyxPQUFPQyxPQUFQLEdBQWlCNUMsRUFBakIiLCJmaWxlIjoibGliX2RxZnMuZXh0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRxZnMgPSByZXF1aXJlKCcuL2xpYl9kcWZzJylcbmNsYXNzIHN5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5maW5hbFZhbCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgICBjZChwYXRoKXtcbiAgICAgICAgZHFmcy5jZChwYXRoKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICBscyhhYnNvbHV0ZVBhdGgsb3B0aW9ucyl7XG4gICAgICAgIHRoaXMuZmluYWxWYWwgPSBkcWZzLmxzKGFic29sdXRlUGF0aCxvcHRpb25zKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICB0b3VjaChmaWxlKXtcbiAgICAgICAgZHFmcy50b3VjaChmaWxlKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICBta2Rpcigpe1xuXG4gICAgfVxuICAgIHJtZGlyKCl7XG5cbiAgICB9XG4gICAgcm0oKXtcblxuICAgIH1cbiAgICBjcCgpe1xuXG4gICAgfVxuICAgIG12KCl7XG5cbiAgICB9XG4gICAgLy8gZG9uZVxuICAgIHNvcnRCeU5hbWUobW9kZXMpIHtcbiAgICAgICAgY29uc3QgYXJyID0gdGhpcy5maW5hbFZhbC5yZXZlcnNlKClcbiAgICAgICAgdGhpcy5maW5hbFZhbCA9IGFyclxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICBzb3J0QnlTaXplKG1vZGVzKSB7XG4gICAgICAgIGNvbnN0IG1vZGVJc1VuZGVmID0gbW9kZXMgPT0gdW5kZWZpbmVkXG4gICAgICAgIGNvbnN0IG1vZGVBY2NwdCA9IHR5cGVvZiBtb2RlcyA9PSAnc3RyaW5nJ1xuICAgICAgICBjb25zdCBzYWRUaHJvdyA9IG0gPT4ge3Rocm93IGAke219YH1cbiAgICAgICAgY29uc3Qgb3B0cyA9IFsnYXNjJywnZGVjJ11cbiAgICAgICAgY29uc3QgYWNzID0gKCkgPT4ge3RoaXMuZmluYWxWYWwgPSB0aGlzLmZpbmFsVmFsLnNvcnQoKGEsYikgPT4gYS5zaXplLWIuc2l6ZSl9XG4gICAgICAgIGNvbnN0IGRlYyA9ICgpID0+IHt0aGlzLmZpbmFsVmFsID0gdGhpcy5maW5hbFZhbC5zb3J0KChhLGIpID0+IGIuc2l6ZS1hLnNpemUpfVxuXG4gICAgICAgICAgICBcbiAgICAgICAgdHlwZW9mIG1vZGVzICE9ICdzdHJpbmcnICYmIG1vZGVzICE9IHVuZGVmaW5lZCAmJiBzYWRUaHJvdyhgRXJvb3IgSW4gU29ydEJ5U2l6ZTogYXJnIHNob3VsZCBvbmx5IGJlIGEgdHlwZSBvZiBzdHJpbmdgKVxuXG4gICAgICAgIGlmKG1vZGVBY2NwdCAmJiAhbW9kZUlzVW5kZWYpe1xuICAgICAgICAgICAgaWYob3B0cy5pbmRleE9mKG1vZGVzKSAhPSAtMSl7XG4gICAgICAgICAgICAgICAgb3B0cy5pbmRleE9mKG1vZGVzKSA9PSAwICYmIGFjcygpXG4gICAgICAgICAgICAgICAgb3B0cy5pbmRleE9mKG1vZGVzKSA9PSAxICYmIGRlYygpXG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBzYWRUaHJvdyhgRXJyb3IgSW4gU29ydEJ5U2l6ZTogYXJnICR7bW9kZXN9IGlzIG5vdCByZWNvZ25pemUsIG9ubHkgYXNjIGFuZCBkZWNgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBkb25lXG4gICAgc29ydEJ5TnVtYmVyRGlySXRlbXMobW9kZXMpIHtcbiAgICAgICAgY29uc3QgbW9kZUlzVW5kZWYgPSBtb2RlcyA9PSB1bmRlZmluZWRcbiAgICAgICAgY29uc3QgbW9kZUFjY3B0ID0gdHlwZW9mIG1vZGVzID09ICdzdHJpbmcnXG4gICAgICAgIGNvbnN0IHNhZFRocm93ID0gbSA9PiB7dGhyb3cgYCR7bX1gfVxuICAgICAgICBjb25zdCBvcHRzID0gWydhc2MnLCdkZWMnXVxuICAgICAgICBjb25zdCBhY3MgPSAoKSA9PiB7dGhpcy5maW5hbFZhbCA9IHRoaXMuZmluYWxWYWwuc29ydCgoYSxiKSA9PiBhLnNpemUtYi5pdGVtcyl9XG4gICAgICAgIGNvbnN0IGRlYyA9ICgpID0+IHt0aGlzLmZpbmFsVmFsID0gdGhpcy5maW5hbFZhbC5zb3J0KChhLGIpID0+IGIuc2l6ZS1hLml0ZW1zKX1cblxuICAgICAgICAgICAgXG4gICAgICAgIHR5cGVvZiBtb2RlcyAhPSAnc3RyaW5nJyAmJiBtb2RlcyAhPSB1bmRlZmluZWQgJiYgc2FkVGhyb3coYEVyb29yIEluIFNvcnRCeVNpemU6IGFyZyBzaG91bGQgb25seSBiZSBhIHR5cGUgb2Ygc3RyaW5nYClcblxuICAgICAgICBpZihtb2RlQWNjcHQgJiYgIW1vZGVJc1VuZGVmKXtcbiAgICAgICAgICAgIGlmKG9wdHMuaW5kZXhPZihtb2RlcykgIT0gLTEpe1xuICAgICAgICAgICAgICAgIG9wdHMuaW5kZXhPZihtb2RlcykgPT0gMCAmJiBhY3MoKVxuICAgICAgICAgICAgICAgIG9wdHMuaW5kZXhPZihtb2RlcykgPT0gMSAmJiBkZWMoKVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgc2FkVGhyb3coYEVycm9yIEluIFNvcnRCeVNpemU6IGFyZyAke21vZGVzfSBpcyBub3QgcmVjb2duaXplLCBvbmx5IGFzYyBhbmQgZGVjYClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gZG9uZVxuICAgIHNvcnRCeURhdGVDcmVhdGVkKCl7XG5cbiAgICB9XG4gICAgc29ydEJ5RGF0ZU1vZGlmaWVkKCl7XG5cbiAgICB9XG4gICAgZ3JvdXBCeVR5cGUoKXtcbiAgICAgICAgY3VycmVudFR5cGVzID0gW11cbiAgICB9XG4gICAgZ3JvdXBCeU1vbnRoKCl7XG5cbiAgICB9XG4gICAgZ3JvdXBCeVllYXIoKXtcblxuICAgIH1cbiAgICBnZXRDaGlsZERpcnMocGF0aCl7XG4gICAgICAgIFxuICAgIH1cbiAgICBkb25lKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmFsVmFsXG4gICAgfVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gc3kiXX0=