{"version":3,"sources":["lib_fs-2b.test.js"],"names":["d","require","test","ls","startsWith","e","expect","message","toBe","cd"],"mappings":";AACA,CAAC,MAAM;AACH,UAAMA,IAAIC,QAAQ,YAAR,CAAV;;AAEAC,SAAK,kDAAL,EAAwD,MAAM;AAC1D,YAAG;AACCF,cAAEG,EAAF,CAAK,YAAL,EAAkB,EAACC,YAAY,MAAb,EAAlB;AACH,SAFD,CAEC,OAAMC,CAAN,EAAQ;AACLC,mBAAOD,EAAEE,OAAT,EAAkBC,IAAlB,CAAuB,sCAAvB;AACH;AACJ,KAND;;AAQAN,SAAK,gCAAL,EAAsC,MAAM;AACxC,YAAG;AACEF,cAAES,EAAF,CAAK,YAAL;AACAT,cAAEG,EAAF,CAAK,SAAL;AACJ,SAHD,CAGC,OAAME,CAAN,EAAQ;AACLC,mBAAOD,EAAEE,OAAT,EAAkBC,IAAlB,CAAuB,8CAAvB;AACH;AACJ,KAPD;AAQH,CAnBD","file":"lib_fs-2b.test.js","sourcesContent":["\n(() => {\n    const d = require('./lib_dqfs')\n\n    test('happy path case2: arg is 2 with path and options',() => {\n        try{\n            d.ls('foo/bazzzz',{startsWith: 'test'})\n        }catch(e){\n            expect(e.message).toBe('on ls: no such directory foo/bazzzz/')\n        }\n    })\n    \n    test('happy path case4: arg is blank',() => {\n        try{\n             d.cd('playground')\n             d.ls('lib/foo')\n        }catch(e){\n            expect(e.message).toBe('on ls: no such directory playground/lib/foo/')\n        }\n    })\n})()\n"]}